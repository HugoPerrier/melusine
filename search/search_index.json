{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to melusine","text":""},{"location":"#overview","title":"Overview","text":"<p>Melusine is a high-level library for emails processing that can be used to :</p> <ul> <li>Categorize emails using AI, regex patterns or a mix of both</li> <li>Prioritize urgent emails</li> <li>Extract information from emails</li> <li>And much more !</li> </ul>"},{"location":"#why-melusine","title":"Why melusine ?","text":"<p>The added value of melusine mainly resides in the following aspects:</p> <ul> <li>Off-the-shelf features :  melusine comes with a number of features that can be used straightaway<ul> <li>Segmenting messages in an email conversation</li> <li>Tagging message parts (Email body, signatures, footers, etc)</li> <li>Transferred email handling</li> </ul> </li> <li>Execution framework : users can focus on the email qualification code and save time on the boilerplate code  <ul> <li>debug mode  </li> <li>pipeline execution  </li> <li>code parallelization</li> <li>etc</li> </ul> </li> <li>AI components : the module <code>models</code> makes it easy to define and train AI models suited to your needs<ul> <li>Define models using Keras or PyTorch</li> <li>Use pre-trained models through HuggingFace</li> <li>Create hybrid models combining text and meta-features (structured data)</li> </ul> </li> <li>Flexibility : melusine is highly flexible and modular so custom components can be integrated easily</li> </ul>"},{"location":"#the-melusine-package","title":"The melusine package","text":"<pre><code>melusine/\n    docs/  # Documentation (using mkdocs-material).\n    exemples/  # Tutorials and exemples\n    src/  # Sources of the melusine package.\n        backend/  # Define execution backends (JSON, Pandas, Polars, etc)\n        conf/  # Configuration loading and default conf\n        data/  # Dummy data for examples and prototyping\n        io/  # Save/Load operations\n        models/  # AI/ML related features\n        regex/  # Regex related code\n        testing/  # Pipeline testing code\n    tests/  # Extensive testing of the code and the tutorials.\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<p>Get started with melusine following our (tested!) tutorials:</p> <ul> <li>Getting Started</li> <li>MelusinePipeline</li> <li>MelusineTransformers</li> <li>MelusineRegex</li> <li>ML models</li> <li>MelusineDetector</li> <li>Configurations</li> </ul>"},{"location":"advanced/ContentTagger/","title":"Use custom message tags","text":""},{"location":"advanced/CustomDetector/","title":"Use a custom MelusineDetector template","text":""},{"location":"advanced/CustomDetector/#specify-abstract-methods","title":"Specify abstract methods","text":""},{"location":"advanced/CustomDetector/#row-transformations-vs-dataframe-transformations","title":"Row transformations vs dataframe transformations","text":""},{"location":"advanced/ExchangeConnector/","title":"Connect melusine to a Microsoft Exchange Mailbox","text":""},{"location":"advanced/PreTrainedModelsHF/","title":"Use pre-trained models from HuggingFace","text":""},{"location":"contribute/how_to_contribute/","title":"How to contribute to Melusine","text":""},{"location":"contribute/maif/","title":"MAIF","text":""},{"location":"history/history/","title":"Project history","text":"<p>Melusine originated at MAIF #AssurreurMilitant</p>"},{"location":"philosophy/philosophy/","title":"Code philosophy","text":""},{"location":"philosophy/philosophy/#what-is-a-code-philosophy-and-why-do-i-need-it","title":"What is a code philosophy and why do I need it ?","text":""},{"location":"philosophy/philosophy/#design-patterns","title":"Design patterns","text":""},{"location":"tutorials/00_GettingStarted/","title":"Getting started with Melusine","text":"<p>Let's run emergency detection with melusine :</p> <ul> <li>Load a fake email dataset</li> <li>Load a demonstration pipeline</li> <li>Run the pipeline  <ul> <li>Apply text cleaning transformations  </li> <li>Apply emergency detection</li> </ul> </li> </ul>"},{"location":"tutorials/00_GettingStarted/#input-data","title":"Input data","text":"<p>Email datasets typically contain information about:</p> <ul> <li>Email sender</li> <li>Email recipients</li> <li>Email subject/header</li> <li>Email body</li> <li>Attachments data</li> </ul> <p>The present tutorial only makes use of the body and header data.</p> body header 0 This is an \u00ebm\u00e8rg\u00e9n\u00e7y Help 1 How is life ? Hey ! 2 Urgent update about Mr. Annoying Latest news 3 Please call me now URGENT"},{"location":"tutorials/00_GettingStarted/#code","title":"Code","text":"<p>A typical code for a melusine-based application looks like this :</p> <pre><code>from melusine.data import load_email_data\nfrom melusine.pipeline import MelusinePipeline\n# Load an email dataset\ndf = load_email_data()\n# Load a pipeline\npipeline = MelusinePipeline.from_config(\"demo_pipeline\")  # (1)!\n# Run the pipeline\ndf = pipeline.transform(df)\n</code></pre> <ol> <li>This tutorial uses one of the default pipeline configuration <code>demo_pipeline</code>. Melusine users will typically define their own pipeline configuration.    See more in the Configurations tutorial</li> </ol>"},{"location":"tutorials/00_GettingStarted/#output-data","title":"Output data","text":"<p>The pipeline created extra columns in the dataset. Some columns are temporary variables required by detectors (ex: <code>normalized_body</code>) and some are detection results with direct business value (ex: <code>emergency_result</code>).</p> body header normalized_body emergency_result 0 This is an \u00ebm\u00e8rg\u00e9n\u00e7y Help This is an emergency True 1 How is life ? Hey ! How is life ? False 2 Urgent update about Mr. Annoying Latest news Urgent update about Mr. Annoying False 3 Please call me now URGENT Please call me now True"},{"location":"tutorials/00_GettingStarted/#pipeline-steps","title":"Pipeline steps","text":"<p>Illustration of the pipeline used in the present tutorial :</p> <pre><code>---\ntitle: Demonstration pipeline\n---\nflowchart LR\n    Input[[Email]] --&gt; A(Cleaner)\n    A(Cleaner) --&gt; C(Normalizer)\n    C --&gt; F(Emergency\\nDetector)\n    F --&gt; Output[[Qualified Email]]</code></pre> <ul> <li><code>Cleaner</code> : Cleaning transformations such as uniformization of line breaks (<code>\\r\\n</code> -&gt; <code>\\n</code>)</li> <li><code>Normalizer</code> : Text normalisation to delete/replace non utf8 characters (<code>\u00e9\u00f6\u00e0</code> -&gt; <code>eoa</code>)</li> <li><code>EmergencyDetector</code> : Detection of urgent emails</li> </ul> <p>Info</p> <p>This demonstration pipeline is kept minimal but typical pipelines include more complex preprocessing and a variety of detectors. For example, pipelines may contain:</p> <ul> <li>Email Segmentation : Split email conversation into unitary messages</li> <li>ContentTagging : Associate tags (SIGNATURE, FOOTER, BODY) to parts of messages</li> <li>Appointment detection : For exemple, detect \"construction work will take place on 01/01/2024\" as an appointment email.</li> <li>More on preprocessing in the MelusineTransformers tutorial</li> <li>More on detectors in the MelusineDetector tutorial</li> </ul>"},{"location":"tutorials/00_GettingStarted/#debug-mode","title":"Debug mode","text":"<p>End users typically want to know what lead melusine to a specific detection result. The debug mode generates additional explainability info.</p> <pre><code>from melusine.data import load_email_data\nfrom melusine.pipeline import MelusinePipeline\n# Load an email dataset\ndf = load_email_data()\n# Activate debug mode\ndf.debug = True\n# Load the default pipeline\npipeline = MelusinePipeline.from_config(\"demo_pipeline\")\n# Run the pipeline\ndf = pipeline.transform(df)\n</code></pre> <p>A new column <code>debug_emergency</code> is created.</p> ... emergency_result debug_emergency 0 ... True [details_below] 1 ... False [details_below] 2 ... False [details_below] 3 ... True [details_below] <p>Inspecting the debug data gives a lot of info:</p> <ul> <li><code>text</code> : Effective text considered for detection.</li> <li><code>EmergencyRegex</code> : melusine used an <code>EmergencyRegex</code> object to run detection.</li> <li><code>match_result</code> : The <code>EmergencyRegex</code> did not match the text</li> <li><code>positive_match_data</code> : The <code>EmergencyRegex</code> matched positively the text pattern \"Urgent\" (Required condition)</li> <li><code>negative_match_data</code> : The <code>EmergencyRegex</code> matched negatively the text pattern \"Mr. Annoying\" (Forbidden condition)</li> <li><code>BLACKLIST</code> : Detection groups can be defined to easily link a matching pattern to the corresponding regex. DEFAULT is used if no detection group is specified.</li> </ul> <pre><code># print(df.iloc[2][\"debug_emergency\"])\n{\n'text': 'Latest news\\nUrgent update about Mr. Annoying'},\n'EmergencyRegex': {\n'match_result': False,\n'negative_match_data': {\n'BLACKLIST': [\n{'match_text': 'Mr. Annoying', 'start': 32, 'stop': 44}\n]},\n'neutral_match_data': {},\n'positive_match_data': {\n'DEFAULT': [\n{'match_text': 'Urgent', 'start': 12, 'stop': 18}\n]\n}\n}\n</code></pre>"},{"location":"tutorials/01_MelusinePipeline/","title":"MelusinePipeline","text":"<p>The <code>MelusinePipeline</code> class is at the core of melusine. It inherits from the <code>sklearn.Pipeline</code> class and adds extra functionalities such as :</p> <ul> <li>Instantiation from configurations</li> <li>Input/output coherence check</li> <li>Debug mode</li> </ul>"},{"location":"tutorials/01_MelusinePipeline/#code","title":"Code","text":""},{"location":"tutorials/02_MelusineTransformers/","title":"MelusineTransformers","text":""},{"location":"tutorials/03_MelusineRegex/","title":"MelusineRegex","text":""},{"location":"tutorials/04_UsingModels/","title":"Using AI models","text":""},{"location":"tutorials/05_MelusineDetectors/","title":"MelusineDetectors","text":"<p>The MelusineDetector is a special type of MelusineTransformer</p>"},{"location":"tutorials/06_Configurations/","title":"Configurations","text":""}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to melusine","text":""},{"location":"#overview","title":"Overview","text":"<p>Melusine is a high-level library for emails processing that can be used to :</p> <ul> <li>Categorize emails using AI, regex patterns or both</li> <li>Prioritize urgent emails</li> <li>Extract information</li> <li>And much more !</li> </ul>"},{"location":"#why-melusine","title":"Why melusine ?","text":"<p>The added value of melusine mainly resides in the following aspects:</p> <ul> <li>Off-the-shelf features :  melusine comes with a number of features that can be used straightaway<ul> <li>Segmenting messages in an email conversation</li> <li>Tagging message parts (Email body, signatures, footers, etc)</li> <li>Transferred email handling</li> </ul> </li> <li>Execution framework : users can focus on the email qualification code and save time on the boilerplate code  <ul> <li>debug mode  </li> <li>pipeline execution  </li> <li>code parallelization</li> <li>etc</li> </ul> </li> <li>Integrations : the modular nature of melusine makes it easy to integrate with a variety of AI frameworks   (HuggingFace, Pytorch, Tensorflow, etc)</li> <li>Production ready : melusine builds-up on the feedback from several years of running automatic email processing  in production at MAIF.</li> </ul>"},{"location":"#the-melusine-package","title":"The melusine package","text":"<pre><code>melusine/\n    docs/  # Documentation (using mkdocs-material).\n    exemples/  # Tutorials and exemples\n    src/  # Sources of the melusine package.\n        backend/  # Define execution backends (JSON, Pandas, Polars, etc)\n        conf/  # Configuration loading and default conf\n        data/  # Dummy data for examples and prototyping\n        io/  # Save/Load operations\n        models/  # AI/ML related features\n        regex/  # Regex related code\n        testing/  # Pipeline testing code\n    tests/  # Extensive testing of the code and the tutorials.\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<p>Get started with melusine following our (tested!) tutorials:</p> <ul> <li> <p>Getting Started</p> </li> <li> <p>MelusinePipeline</p> </li> <li> <p>MelusineTransformers</p> </li> <li> <p>MelusineRegex</p> </li> <li> <p>ML models</p> </li> <li> <p>MelusineDetector</p> </li> <li> <p>Configurations</p> </li> <li> <p>Basic Classification</p> </li> </ul>"},{"location":"advanced/ContentTagger/","title":"Use custom message tags","text":""},{"location":"advanced/CustomDetector/","title":"Use a custom MelusineDetector template","text":""},{"location":"advanced/CustomDetector/#specify-abstract-methods","title":"Specify abstract methods","text":""},{"location":"advanced/CustomDetector/#row-transformations-vs-dataframe-transformations","title":"Row transformations vs dataframe transformations","text":""},{"location":"advanced/ExchangeConnector/","title":"Connect melusine to a Microsoft Exchange Mailbox","text":""},{"location":"advanced/PreTrainedModelsHF/","title":"Use pre-trained models from HuggingFace","text":""},{"location":"contribute/how_to_contribute/","title":"How to contribute to Melusine","text":""},{"location":"contribute/maif/","title":"MAIF","text":""},{"location":"history/history/","title":"Project history","text":"<p>Melusine originated at MAIF #AssurreurMilitant</p>"},{"location":"philosophy/philosophy/","title":"Code philosophy","text":""},{"location":"philosophy/philosophy/#what-is-a-code-philosophy-and-why-do-i-need-it","title":"What is a code philosophy and why do I need it ?","text":""},{"location":"philosophy/philosophy/#design-patterns","title":"Design patterns","text":""},{"location":"tutorials/00_GettingStarted/","title":"Getting started with Melusine","text":"<p>Let's run emergency detection with melusine :</p> <ul> <li>Load a fake email dataset</li> <li>Load a demonstration pipeline</li> <li>Run the pipeline  <ul> <li>Apply text cleaning transformations  </li> <li>Apply emergency detection</li> </ul> </li> </ul>"},{"location":"tutorials/00_GettingStarted/#input-data","title":"Input data","text":"<p>Email datasets typically contain information about:</p> <ul> <li>Email sender</li> <li>Email recipients</li> <li>Email subject/header</li> <li>Email body</li> <li>Attachments data</li> </ul> <p>The present tutorial only makes use of the body and header data.</p> body header 0 This is an \u00ebm\u00e8rg\u00e9n\u00e7y Help 1 How is life ? Hey ! 2 Urgent update about Mr. Annoying Latest news 3 Please call me now URGENT"},{"location":"tutorials/00_GettingStarted/#code","title":"Code","text":"<p>A typical code for a melusine-based application looks like this :</p> <pre><code>from melusine.data import load_email_data\nfrom melusine.pipeline import MelusinePipeline\n# Load an email dataset\ndf = load_email_data()\n# Load a pipeline\npipeline = MelusinePipeline.from_config(\"demo_pipeline\")  # (1)!\n# Run the pipeline\ndf = pipeline.transform(df)\n</code></pre> <ol> <li>This tutorial uses one of the default pipeline configuration <code>demo_pipeline</code>. Melusine users will typically define their own pipeline configuration.    See more in the Configurations tutorial</li> </ol>"},{"location":"tutorials/00_GettingStarted/#output-data","title":"Output data","text":"<p>The pipeline created extra columns in the dataset. Some columns are temporary variables required by detectors (ex: <code>normalized_body</code>) and some are detection results with direct business value (ex: <code>emergency_result</code>).</p> body header normalized_body emergency_result 0 This is an \u00ebm\u00e8rg\u00e9n\u00e7y Help This is an emergency True 1 How is life ? Hey ! How is life ? False 2 Urgent update about Mr. Annoying Latest news Urgent update about Mr. Annoying False 3 Please call me now URGENT Please call me now True"},{"location":"tutorials/00_GettingStarted/#pipeline-steps","title":"Pipeline steps","text":"<p>Illustration of the pipeline used in the present tutorial :</p> <pre><code>---\ntitle: Demonstration pipeline\n---\nflowchart LR\n    Input[[Email]] --&gt; A(Cleaner)\n    A(Cleaner) --&gt; C(Normalizer)\n    C --&gt; F(Emergency\\nDetector)\n    F --&gt; Output[[Qualified Email]]</code></pre> <ul> <li><code>Cleaner</code> : Cleaning transformations such as uniformization of line breaks (<code>\\r\\n</code> -&gt; <code>\\n</code>)</li> <li><code>Normalizer</code> : Text normalisation to delete/replace non utf8 characters (<code>\u00e9\u00f6\u00e0</code> -&gt; <code>eoa</code>)</li> <li><code>EmergencyDetector</code> : Detection of urgent emails</li> </ul> <p>Info</p> <p>This demonstration pipeline is kept minimal but typical pipelines include more complex preprocessing and a variety of detectors. For example, pipelines may contain:</p> <ul> <li>Email Segmentation : Split email conversation into unitary messages</li> <li>ContentTagging : Associate tags (SIGNATURE, FOOTER, BODY) to parts of messages</li> <li>Appointment detection : For exemple, detect \"construction work will take place on 01/01/2024\" as an appointment email.</li> <li>More on preprocessing in the MelusineTransformers tutorial</li> <li>More on detectors in the MelusineDetector tutorial</li> </ul>"},{"location":"tutorials/00_GettingStarted/#debug-mode","title":"Debug mode","text":"<p>End users typically want to know what lead melusine to a specific detection result. The debug mode generates additional explainability info.</p> <pre><code>from melusine.data import load_email_data\nfrom melusine.pipeline import MelusinePipeline\n# Load an email dataset\ndf = load_email_data()\n# Activate debug mode\ndf.debug = True\n# Load the default pipeline\npipeline = MelusinePipeline.from_config(\"demo_pipeline\")\n# Run the pipeline\ndf = pipeline.transform(df)\n</code></pre> <p>A new column <code>debug_emergency</code> is created.</p> ... emergency_result debug_emergency 0 ... True [details_below] 1 ... False [details_below] 2 ... False [details_below] 3 ... True [details_below] <p>Inspecting the debug data gives a lot of info:</p> <ul> <li><code>text</code> : Effective text considered for detection.</li> <li><code>EmergencyRegex</code> : melusine used an <code>EmergencyRegex</code> object to run detection.</li> <li><code>match_result</code> : The <code>EmergencyRegex</code> did not match the text</li> <li><code>positive_match_data</code> : The <code>EmergencyRegex</code> matched positively the text pattern \"Urgent\" (Required condition)</li> <li><code>negative_match_data</code> : The <code>EmergencyRegex</code> matched negatively the text pattern \"Mr. Annoying\" (Forbidden condition)</li> <li><code>BLACKLIST</code> : Detection groups can be defined to easily link a matching pattern to the corresponding regex. DEFAULT is used if no detection group is specified.</li> </ul> <pre><code># print(df.iloc[2][\"debug_emergency\"])\n{\n'text': 'Latest news\\nUrgent update about Mr. Annoying'},\n'EmergencyRegex': {\n'match_result': False,\n'negative_match_data': {\n'BLACKLIST': [\n{'match_text': 'Mr. Annoying', 'start': 32, 'stop': 44}\n]},\n'neutral_match_data': {},\n'positive_match_data': {\n'DEFAULT': [\n{'match_text': 'Urgent', 'start': 12, 'stop': 18}\n]\n}\n}\n</code></pre>"},{"location":"tutorials/01_MelusinePipeline/","title":"MelusinePipeline","text":"<p>The <code>MelusinePipeline</code> class is at the core of melusine. It inherits from the <code>sklearn.Pipeline</code> class and adds extra functionalities such as :</p> <ul> <li>Instantiation from configurations</li> <li>Input/output coherence check</li> <li>Debug mode</li> </ul>"},{"location":"tutorials/01_MelusinePipeline/#code","title":"Code","text":""},{"location":"tutorials/02_MelusineTransformers/","title":"MelusineTransformers","text":""},{"location":"tutorials/03_MelusineRegex/","title":"MelusineRegex","text":""},{"location":"tutorials/04_UsingModels/","title":"Using AI models","text":""},{"location":"tutorials/05_MelusineDetectors/","title":"MelusineDetectors","text":"<p>The MelusineDetector is a special type of MelusineTransformer</p>"},{"location":"tutorials/06_Configurations/","title":"Configurations","text":""},{"location":"tutorials/07_BasicClassification/","title":"Zero Shot Classification","text":"<p>Machine Learning is commonly used to classify data into pre-defined categories. </p> <pre><code>---\ntitle: Email classification\n---\nflowchart LR\n    Input[[Email]] --&gt; X(((Classifier)))\n    X --&gt; A(Car)\n    X --&gt; B(Boat)\n    X --&gt; C(Housing)\n    X --&gt; D(Health)</code></pre> <p>Typically, to reach high classification performance,  models need to be trained on context specific labeled data.  Zero-shot classification is a type of classification that  uses a pre-trained model and does not require further training on context specific data.</p>"},{"location":"tutorials/07_BasicClassification/#tutorial-intro","title":"Tutorial intro","text":"<p>In this tutorial we want to detect insatisfaction in an email dataset.  Let's create a basic dataset: <pre><code>import pandas as pd\ndef create_dataset():\ndf = pd.DataFrame([\n{\n\"header\": \"Dossier 123456\",\n\"body\": \"Merci beaucoup pour votre gentillesse et votre \u00e9coute !\",\n},\n{\n\"header\": \"R\u00e9clamation (Dossier 987654)\",\n\"body\": (\n\"Bonjour, je ne suis pas satisfait de cette situation, \"\n\"r\u00e9pondez-moi rapidement svp!\"\n),\n},\n])\nreturn df\n</code></pre></p>"},{"location":"tutorials/07_BasicClassification/#classify-with-zero-shot-classification","title":"Classify with Zero-Shot-Classification","text":"<p>The <code>transformers</code> library makes it really simple to use pre-trained models for zero shot classification.</p> <pre><code>model_name_or_path = \"cmarkea/distilcamembert-base-nli\"\nsentences = [\n\"Quelle belle journ\u00e9e aujourd'hui\",\n\"La mar\u00e9e est haute\",\n\"Ce film est une catastrophe, je suis en col\u00e8re\",\n]\nclassifier = pipeline(\ntask='zero-shot-classification',\nmodel=model_name_or_path,\ntokenizer=model_name_or_path\n)\nresult = classifier(\nsequences=sentences,\ncandidate_labels=\", \".join([\"positif\", \"n\u00e9gatif\"]),\nhypothesis_template=\"Ce texte est {}.\"\n)\n</code></pre> <p>The classifier returns a score for the \"positif\" and \"n\u00e9gatif\" label for each input text:</p> <pre><code>[\n{\n'sequence': \"Quelle belle journ\u00e9e aujourd'hui\",\n'labels': ['positif', 'n\u00e9gatif'],\n'scores': [0.95, 0.05]\n},\n{\n'sequence': 'La mar\u00e9e est haute',\n'labels': ['positif', 'n\u00e9gatif'],\n'scores': [0.76, 0.24]\n},\n{'sequence': 'Ce film est une catastrophe, je suis en col\u00e8re',\n'labels': ['n\u00e9gatif', 'positif'],\n'scores': [0.97, 0.03]\n}\n]\n</code></pre>"},{"location":"tutorials/07_BasicClassification/#implement-a-dissatisfaction-detector","title":"Implement a Dissatisfaction detector","text":"<p>A full email processing pipeline could contain multiple models.  Melusine uses the MelusineDetector template class to standardise how models are integrated into a pipeline.</p> <pre><code>class DissatisfactionDetector(MelusineDetector):\n\"\"\"\n    Detect if the text expresses dissatisfaction.\n    \"\"\"\n# Dataframe column names\nOUTPUT_RESULT_COLUMN = \"dissatisfaction_result\"\nTMP_DETECTION_INPUT_COLUMN = \"detection_input\"\nTMP_DETECTION_OUTPUT_COLUMN = \"detection_output\"\n# Model inference parameters\nPOSITIVE_LABEL = \"positif\"\nNEGATIVE_LABEL = \"n\u00e9gatif\"\nHYPOTHESIS_TEMPLATE = \"Ce texte est {}.\"\ndef __init__(self, model_name_or_path: str, text_columns: List[str], threshold: float):\nself.text_columns = text_columns\nself.threshold = threshold\nself.classifier = pipeline(\ntask='zero-shot-classification',\nmodel=model_name_or_path,\ntokenizer=model_name_or_path\n)\nsuper().__init__(\ninput_columns=text_columns,\noutput_columns=[self.OUTPUT_RESULT_COLUMN],\nname=\"dissatisfaction\"\n)\n</code></pre> <p>The <code>pre_detect</code> method assembles the text that we want to use for classification.</p> <pre><code>def pre_detect(self, row, debug_mode=False):\n# Assemble the text columns into a single text\neffective_text = \"\"\nfor col in self.text_columns:\neffective_text += \"\\n\" + row[col]\nrow[self.TMP_DETECTION_INPUT_COLUMN] = effective_text\n# Store the effective detection text in the debug data\nif debug_mode:\nrow[self.debug_dict_col] = {\"detection_input\": row[self.TMP_DETECTION_INPUT_COLUMN]}\nreturn row\n</code></pre> <p>The <code>detect</code> method runs the classification model on the text.</p> <pre><code>def detect(self, row, debug_mode=False):\n# Run the classifier on the text\npipeline_result = self.classifier(\nsequences=row[self.TMP_DETECTION_INPUT_COLUMN],\ncandidate_labels=\", \".join([self.POSITIVE_LABEL, self.NEGATIVE_LABEL]),\nhypothesis_template=self.HYPOTHESIS_TEMPLATE\n)\n# Format classification result\nresult_dict = dict(zip(pipeline_result[\"labels\"], pipeline_result[\"scores\"]))\nrow[self.TMP_DETECTION_OUTPUT_COLUMN] = result_dict\n# Store ML results in the debug data\nif debug_mode:\nrow[self.debug_dict_col].update(result_dict)\nreturn row\n</code></pre> <p>The <code>post_detect</code> method applies a threshold on the prediction score to determine the detection result.</p> <pre><code>def post_detect(self, row, debug_mode=False):\n# Compare classification score to the detection threshold\nif row[self.TMP_DETECTION_OUTPUT_COLUMN][self.NEGATIVE_LABEL] &gt; self.threshold:\nrow[self.OUTPUT_RESULT_COLUMN] = True\nelse:\nrow[self.OUTPUT_RESULT_COLUMN] = False\nreturn row\n</code></pre> <p>On top of that, the detector takes care of building debug data to make the result explicable.</p>"},{"location":"tutorials/07_BasicClassification/#run-detection","title":"Run detection","text":"<p>Putting it all together, we run the detector on the input dataset.</p> <pre><code>df = create_dataset()\ndetector = DissatisfactionDetector(\nmodel_name_or_path=\"cmarkea/distilcamembert-base-nli\",\ntext_columns=[\"header\", \"body\"],\nthreshold=0.7,\n)\ndf = detector.transform(df)\n</code></pre> <p>As a result, we get a new column <code>dissatisfaction_result</code> with the detection result.  We could have detection details by running the detector in debug mode.</p> header body dissatisfaction_result 0 Dossier 123456 Merci beaucoup pour votre gentillesse et votre \u00e9coute ! False 1 R\u00e9clamation (Dossier 987654) Bonjour, je ne suis pas satisfait de cette situation, r\u00e9pondez-moi rapidement svp! True"}]}